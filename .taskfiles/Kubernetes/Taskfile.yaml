---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  KUBECONFORM_SCRIPT: "{{.SCRIPTS_DIR}}/kubeconform.sh"
  KUBERNETES_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/Kubernetes/resources"

tasks:
  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - for: { var: resource }
        cmd: kubectl get {{.ITEM}} {{.CLI_ARGS | default "-A"}}
    vars:
      resource: >-
        nodes
        gitrepositories
        kustomizations
        helmrepositories
        helmreleases
        certificates
        certificaterequests
        ingresses
        pods

  kubeconform:
    desc: Validate Kubernetes manifests with kubeconform
    cmd: bash {{.KUBECONFORM_SCRIPT}} {{.KUBERNETES_DIR}}
    preconditions:
      - msg: Missing kubeconform script
        sh: test -f {{.KUBECONFORM_SCRIPT}}

  .reset:
    internal: true
    cmd: rm -rf {{.KUBERNETES_DIR}}

  sync-secrets:
    desc: Sync ExternalSecret resources from provider
    summary: |
      ns: Namespace to sync secret in (default: default)
      secret: Secret to sync (default: unset/all secrets)
    cmd: |
      {{if eq .secret ""}}
        kubectl get externalsecret --all-namespaces --no-headers -A | awk '{print $1, $2}' \
          | xargs --max-procs=2 -l bash -c 'kubectl -n $0 annotate externalsecret $1 force-sync=$(date +%s) --overwrite'
      {{else}}
        kubectl --namespace {{.ns}} annotate externalsecret {{.secret}} force-sync=$(date +%s) --overwrite
      {{end}}
    vars:
      secret: '{{ .secret | default ""}}'
      ns: '{{.ns | default "default"}}'
      cluster: '{{.cluster | default "main"}}'
    preconditions:
      - kubectl --namespace {{.ns}} get externalsecret {{.secret}}

  network:
    desc: Create a netshoot container for a cluster
    summary: |
      Args:
        ns: Namespace the PVC is in (default: default)
    interactive: true
    cmd: |
      kubectl run -n {{.ns}} netshoot --rm -i --tty --image ghcr.io/nicolaka/netshoot:latest {{.CLI_ARGS}}
    vars:
      ns: '{{.ns | default "default"}}'

  privileged:
    desc: Run a privileged pod
    cmd: |
      echo "Using envsubst: $(which envsubst)"
      kubectl run privileged-{{.node}} -i --rm --image=null \
        --overrides="$(yq {{.KUBERNETES_RESOURCES_DIR}}/privileged-pod.tmpl.yaml -o=json | envsubst)"
    env:
      node: "{{.node}}"
    preconditions:
      - which envsubst
      - test -f {{.KUBERNETES_RESOURCES_DIR}}/privileged-pod.tmpl.yaml
