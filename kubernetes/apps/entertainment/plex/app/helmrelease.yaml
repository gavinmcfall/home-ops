---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: plex
spec:
  interval: 30m
  timeout: 5m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: nvidia-device-plugin
      namespace: tools
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: volsync
      namespace: storage
  values:
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/plex
              tag: 1.40.2.8395-c67dce28e@sha256:a2a3149c1326e7777bfe9def135c687d884652f78d34e92264b0dab765908215
            env:
              TZ: ${TIMEZONE}
              # Transcoding:
              # https://github.com/NVIDIA/nvidia-container-runtime#nvidia_visible_devices
              NVIDIA_VISIBLE_DEVICES: all
              # https://github.com/NVIDIA/nvidia-container-runtime#nvidia_driver_capabilities
              NVIDIA_DRIVER_CAPABILITIES: all
            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /identity
                    port: 32400
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                nvidia.com/gpu: 1
              limits:
                memory: 16Gi
                nvidia.com/gpu: 1
                # gpu.intel.com/i915: 1
        pod:
          # affinity:
          #   podAntiAffinity:
          #     requiredDuringSchedulingIgnoredDuringExecution:
          #       - labelSelector:
          #           matchExpressions:
          #             - key: app.kubernetes.io/name
          #               operator: In
          #               values: ["frigate"]
          #         topologyKey: kubernetes.io/hostname
          nodeSelector:
            nvidia.feature.node.kubernetes.io/gpu: "true"
          runtimeClassName: nvidia
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            runAsNonRoot: true
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups: [44, 105, 10000]
    service:
      main:
        type: LoadBalancer
        annotations:
          io.cilium/lb-ipam-ips: 10.90.3.204
        ports:
          http:
            port: 32400
    ingress:
      main:
        enabled: true
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: &host "{{ .Release.Name }}.nerdz.cloud"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: plex
      # Separate PVC for cache to avoid backing up cache files
      plex-cache:
        existingClaim: plex-cache
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      tmp:
        type: emptyDir
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: 10.90.3.104
        path: /mnt/data
        globalMounts:
          - path: /media
            readOnly: true
